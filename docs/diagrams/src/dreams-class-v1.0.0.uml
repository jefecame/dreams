@startuml dreams

!theme blueprint

' Configuration
skinparam classAttributeIconSize 0
skinparam backgroundColor transparent
skinparam shadowing false
skinparam linetype ortho

' Color scheme
skinparam class {
    BackgroundColor White
    BorderColor #333333
    ArrowColor #333333
}

' Header
title Dreams Sales System - Class Diagram

' Main business package
package "Dreams Sales System" #LightBlue {

    ' Core domain classes
    package "Domain" #LightGreen {
        
        class Cliente {
            - id: Long
            - nombre: String
            - email: String
            - fechaRegistro: LocalDateTime
            --
            + Cliente(nombre: String, email: String)
            + getId(): Long
            + getNombre(): String
            + getEmail(): String
            + getFechaRegistro(): LocalDateTime
            + setNombre(nombre: String): void
            + setEmail(email: String): void
            + validarEmail(): boolean
        }

        class Venta {
            - id: Long
            - cliente: Cliente
            - items: List<ItemVenta>
            - total: BigDecimal
            - fecha: LocalDateTime
            - estado: EstadoVenta
            --
            + Venta(cliente: Cliente)
            + getId(): Long
            + getCliente(): Cliente
            + getItems(): List<ItemVenta>
            + getTotal(): BigDecimal
            + getFecha(): LocalDateTime
            + getEstado(): EstadoVenta
            + agregarProducto(producto: Producto, cantidad: int): void
            + removerItem(itemId: Long): void
            - calcularTotal(): BigDecimal
            + procesar(): void
            + cancelar(): void
            + mostrarFactura(): String
        }

        class ItemVenta {
            - id: Long
            - producto: Producto
            - cantidad: int
            - precioUnitario: BigDecimal
            --
            + ItemVenta(producto: Producto, cantidad: int)
            + getId(): Long
            + getProducto(): Producto
            + getCantidad(): int
            + getPrecioUnitario(): BigDecimal
            + getSubtotal(): BigDecimal
            + setCantidad(cantidad: int): void
        }

        class Producto {
            - id: Long
            - nombre: String
            - precio: BigDecimal
            - categoria: Categoria
            - stock: int
            - activo: boolean
            --
            + Producto(nombre: String, precio: BigDecimal, categoria: Categoria)
            + getId(): Long
            + getNombre(): String
            + getPrecio(): BigDecimal
            + getCategoria(): Categoria
            + getStock(): int
            + isActivo(): boolean
            + setStock(stock: int): void
            + actualizarStock(cantidad: int): boolean
            + mostrarDetalles(): String
            + validarDisponibilidad(cantidad: int): boolean
        }

        enum EstadoVenta {
            PENDIENTE
            PROCESADA
            CANCELADA
            REEMBOLSADA
        }

        enum Categoria {
            ELECTRONICA
            ROPA
            HOGAR
            DEPORTES
            OTROS
        }
    }

    ' Test classes
    package "Tests" #LightYellow {
        class VentaTest <<Test>> {
            - venta: Venta {static}
            - cliente: Cliente {static}
            - productos: List<Producto> {static}
            --
            + setUp(): void {static}
            + tearDown(): void {static}
            + testCrearVentaSimple(): void {static}
            + testCrearVentaMultipleProductos(): void {static}
            + testProbarVentaSinCliente(): void {static}
            + testCalcularTotal(): void {static}
            + testActualizarStock(): void {static}
            - generarProductosPrueba(): List<Producto> {static}
            - validarVenta(venta: Venta): boolean {static}
        }
    }
}

' Relationships
Cliente ||--o{ Venta : "realiza"
Venta ||--|| Cliente : "pertenece a"
Venta ||--o{ ItemVenta : "contiene"
ItemVenta }o--|| Producto : "referencia"
Producto }o--|| Categoria : "pertenece a"
Venta }o--|| EstadoVenta : "tiene estado"

' Test dependencies
VentaTest .up.> Venta : "tests"
VentaTest .up.> Cliente : "uses"
VentaTest .up.> Producto : "uses"

' Notes
note right of Venta : Aggregate root\nfor sales domain
note bottom of ItemVenta : Value object\nwith calculated subtotal
note left of Producto : Entity with\nstock management

' Layout hints
Cliente -[hidden]down- Producto
Venta -[hidden]down- ItemVenta

@enduml