@startuml Dreams System Model v1.0.2

!theme blueprint

' Configuration
skinparam classAttributeIconSize 0
skinparam backgroundColor transparent
skinparam shadowing false
skinparam linetype ortho
skinparam packageStyle rectangle

' Modern color scheme
skinparam class {
    BackgroundColor White
    BorderColor #2E86AB
    ArrowColor #2E86AB
}

skinparam package {
    BackgroundColor #F24236
    BorderColor #A23B72
    FontColor White
}

' Header with version
title Dreams Sales System - Database Model v1.0.2\n<size:14><color:gray>Entity-Relationship Focused Design</color></size>

' Main application layers
package "üè™ Dreams Application" #LightSteelBlue {
    
    ' Core entities package
    package "üìä Data Layer" #LightGreen {
        
        class Cliente <<Entity>> {
            ' === ATTRIBUTES ===
            - {field} **id**: UUID <<PK>>
            - {field} nombre: String
            - {field} email: String
            - {field} fechaCreacion: LocalDateTime
            - {field} activo: boolean
            ..
            ' === CONSTRUCTORS ===
            + Cliente(nombre: String, email: String)
            + Cliente(id: UUID, nombre: String, email: String)
            ..
            ' === ACCESSORS ===
            + getId(): UUID
            + getNombre(): String
            + getEmail(): String
            + getFechaCreacion(): LocalDateTime
            + isActivo(): boolean
            ..
            ' === MUTATORS ===
            + setNombre(nombre: String): void
            + setEmail(email: String): void
            + desactivar(): void
            + activar(): void
            ..
            ' === BUSINESS METHODS ===
            + actualizarInformacion(nombre: String, email: String): void
            + validarEmail(): boolean
            + obtenerVentasActivas(): List<Venta>
        }
        
        class Producto <<Entity>> {
            ' === ATTRIBUTES ===
            - {field} **id**: Long <<PK>>
            - {field} nombre: String
            - {field} precio: BigDecimal
            - {field} categoria: CategoriaProducto
            - {field} stock: Integer
            - {field} stockMinimo: Integer
            - {field} activo: boolean
            - {field} fechaCreacion: LocalDateTime
            ..
            ' === CONSTRUCTORS ===
            + Producto(nombre: String, precio: BigDecimal, categoria: CategoriaProducto)
            + Producto(id: Long, nombre: String, precio: BigDecimal, categoria: CategoriaProducto, stock: Integer)
            ..
            ' === ACCESSORS ===
            + getId(): Long
            + getNombre(): String
            + getPrecio(): BigDecimal
            + getCategoria(): CategoriaProducto
            + getStock(): Integer
            + getStockMinimo(): Integer
            + isActivo(): boolean
            ..
            ' === MUTATORS ===
            + setPrecio(precio: BigDecimal): void
            + setStock(stock: Integer): void
            + setStockMinimo(minimo: Integer): void
            ..
            ' === BUSINESS METHODS ===
            + actualizarStock(cantidad: Integer): boolean
            + validarDisponibilidad(cantidadRequerida: Integer): boolean
            + necesitaReposicion(): boolean
            + calcularValorInventario(): BigDecimal
        }
        
        class Venta <<Aggregate Root>> {
            ' === ATTRIBUTES ===
            - {field} **id**: Long <<PK>>
            - {field} **clienteId**: UUID <<FK>>
            - {field} productosVenta: List<ProductoVenta>
            - {field} total: BigDecimal
            - {field} subtotal: BigDecimal
            - {field} impuestos: BigDecimal
            - {field} descuentos: BigDecimal
            - {field} fechaCreacion: LocalDateTime
            - {field} fechaActualizacion: LocalDateTime
            - {field} estado: EstadoVenta
            - {field} numeroFactura: String
            ..
            ' === CONSTRUCTORS ===
            + Venta(clienteId: UUID)
            + Venta(id: Long, clienteId: UUID, fecha: LocalDateTime)
            ..
            ' === ACCESSORS ===
            + getId(): Long
            + getClienteId(): UUID
            + getProductosVenta(): List<ProductoVenta>
            + getTotal(): BigDecimal
            + getSubtotal(): BigDecimal
            + getImpuestos(): BigDecimal
            + getFechaCreacion(): LocalDateTime
            + getEstado(): EstadoVenta
            + getNumeroFactura(): String
            ==
            ' === BUSINESS METHODS ===
            + agregarProducto(productoId: Long, cantidad: Integer): Result<ProductoVenta>
            + removerProducto(productoVentaId: Long): Result<Boolean>
            + actualizarCantidad(productoVentaId: Long, nuevaCantidad: Integer): Result<Boolean>
            - recalcularTotales(): void
            + aplicarDescuento(porcentaje: BigDecimal): void
            + procesar(): Result<Boolean>
            + cancelar(motivo: String): Result<Boolean>
            + generarFactura(): FacturaDTO
        }
        
        class ProductoVenta <<Value Object>> {
            ' === ATTRIBUTES ===
            - {field} **id**: Long <<PK>>
            - {field} **productoId**: Long <<FK>>
            - {field} **ventaId**: Long <<FK>>
            - {field} cantidad: Integer
            - {field} precioUnitario: BigDecimal
            - {field} subtotal: BigDecimal
            - {field} descuento: BigDecimal
            - {field} fechaAgregado: LocalDateTime
            ==
            ' === CONSTRUCTORS ===
            + ProductoVenta(productoId: Long, ventaId: Long, cantidad: Integer, precioUnitario: BigDecimal)
            ==
            ' === ACCESSORS ===
            + getId(): Long
            + getProductoId(): Long
            + getVentaId(): Long
            + getCantidad(): Integer
            + getPrecioUnitario(): BigDecimal
            + getSubtotal(): BigDecimal
            + getDescuento(): BigDecimal
            ==
            ' === MUTATORS ===
            + setCantidad(cantidad: Integer): void
            + aplicarDescuento(descuento: BigDecimal): void
            ==
            ' === BUSINESS METHODS ===
            + calcularSubtotal(): BigDecimal
            + validarCantidad(): boolean
        }
        
        ' === ENUMS ===
        enum EstadoVenta {
            BORRADOR
            PENDIENTE
            PROCESANDO
            COMPLETADA
            CANCELADA
            REEMBOLSADA
        }
        
        enum CategoriaProducto {
            ELECTRONICA
            ROPA_Y_ACCESORIOS
            HOGAR_Y_JARDIN
            DEPORTES_Y_RECREACION
            SALUD_Y_BELLEZA
            LIBROS_Y_MEDIOS
            OTROS
        }
    }
    
    ' Testing layer
    package "üß™ Testing Layer" #LightYellow {
        
        class IntegrationTestSuite <<Test Suite>> {
            - testDataManager: TestDataManager {static}
            - databaseHelper: DatabaseTestHelper {static}
            ==
            ' === SETUP/TEARDOWN ===
            + {static} beforeAll(): void
            + {static} afterAll(): void
            + setUp(): void
            + tearDown(): void
            ==
            ' === CREATE TESTS (C in CRUD) ===
            + testCrearCliente_DatosValidos_Success(): void
            + testCrearProducto_DatosValidos_Success(): void
            + testCrearVenta_ClienteExistente_Success(): void
            + testCrearProductoVenta_ProductoDisponible_Success(): void
            + testCrearCliente_EmailDuplicado_ThrowsException(): void
            ==
            ' === READ TESTS (R in CRUD) ===
            + testBuscarCliente_PorId_ReturnsCliente(): void
            + testBuscarProducto_PorCategoria_ReturnsLista(): void
            + testBuscarVentas_PorCliente_ReturnsVentas(): void
            + testBuscarProductoVenta_PorVenta_ReturnsItems(): void
            ==
            ' === UPDATE TESTS (U in CRUD) ===
            + testActualizarCliente_DatosValidos_Success(): void
            + testActualizarProducto_Stock_ActualizaCorrectamente(): void
            + testProcesarVenta_EstadoPendiente_CambiaACompletada(): void
            + testActualizarCantidadProductoVenta_CantidadValida_Success(): void
            ==
            ' === DELETE TESTS (D in CRUD) ===
            + testEliminarCliente_SinVentasActivas_Success(): void
            + testDesactivarProducto_ConStock_CambiaEstado(): void
            + testCancelarVenta_EstadoPendiente_Success(): void
            + testRemoverProductoVenta_ItemExistente_Success(): void
            ==
            ' === BUSINESS LOGIC TESTS ===
            + testCalcularTotal_ConDescuentos_CalculaCorrectamente(): void
            + testValidarStock_ProductoInsuficiente_ReturnsFalse(): void
            + testGenerarFactura_VentaCompletada_ReturnsFacturaDTO(): void
            ==
            ' === HELPER METHODS ===
            - crearClienteTestData(): Cliente
            - crearProductoTestData(): Producto
            - crearVentaConProductos(): Venta
            - validarEstadoBD(): boolean
        }
        
        class TestDataManager <<Utility>> {
            + {static} generarClientesDePrueba(cantidad: int): List<Cliente>
            + {static} generarProductosDePrueba(cantidad: int): List<Producto>
            + {static} generarVentaCompleta(): Venta
            + {static} limpiarDatosPrueba(): void
        }
    }
}

' === RELATIONSHIPS ===

' Core domain relationships
Cliente ||--o{ Venta : "üõí realiza"
Venta ||--o{ ProductoVenta : "üì¶ contiene"
ProductoVenta }o--|| Producto : "üè∑Ô∏è referencia"
Producto }o--|| CategoriaProducto : "üìÅ pertenece a"
Venta }o--|| EstadoVenta : "üìä tiene estado"

' Test dependencies
IntegrationTestSuite .down.> Cliente : "üß™ tests"
IntegrationTestSuite .down.> Producto : "üß™ tests"
IntegrationTestSuite .down.> Venta : "üß™ tests"
IntegrationTestSuite .down.> ProductoVenta : "üß™ tests"
IntegrationTestSuite .right.> TestDataManager : "üîß uses"

' === NOTES ===
note top of Venta : **Aggregate Root**\nManages sales lifecycle\nand business rules

note right of ProductoVenta : **Value Object**\nImmutable line item\nwith calculated totals

note bottom of Cliente : **Entity**\nCustomer master data\nwith sales history

note left of IntegrationTestSuite : **Comprehensive Testing**\nCRUD + Business Logic\nDatabase Integration

' === LAYOUT OPTIMIZATION ===
Cliente -[hidden]down- Producto
Venta -[hidden]right- ProductoVenta
EstadoVenta -[hidden]up- CategoriaProducto

@enduml
