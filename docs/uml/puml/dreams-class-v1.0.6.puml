@startuml dreams

'=== Estilos ===
!theme spacelab
skinparam classAttributeIconSize 0
skinparam linetype ortho

'=== Título ===
title Programa de Tienda Departamental "Dreams"

'=== Encabezado ===
header <color:#888888>Ing. Jesús Fernando Carrasco Mendoza</color>

'=== Paquetes ===
package dreams.model #999999 {

    '=== Modelos ===
    class Tienda {
        - **id**: int <<PK>>
        - nombre: String
        - ubicacion: String
        - telefono: String
        --
        .. Constructores ..
        + Tienda(id: int, nombre: String, ubicacion: String, telefono: String)
        .. Getters ..
        + getId(): int
        + getNombre(): String
        + getUbicacion(): String
        + getTelefono(): String
    }

    class Cliente {
        - **id**: int <<PK>>
        - nombre: String
        - email: String
        - activo: boolean
        --
        .. Constructores ..
        + Cliente(id: int, nombre: String, email: String)
        .. Getters ..
        + getId(): int
        + getNombre(): String
        + getEmail(): String
        + isActivo(): boolean
        .. Setters ..
        + setNombre(nombre: String): void
        + setEmail(email: String): void
        + setActivo(activo: boolean): void
        .. Controladores ..
        + actualizarInformacion(nombre: String, email: String, activo: boolean): void
    }

    abstract class Producto {
        # **id**: int <<PK>>
        # nombre: String
        # precio: BigDecimal
        # categoria: String
        # stock: int
        # activo: boolean
        --
        .. Constructores ..
        + Producto(nombre: String, precio: BigDecimal, categoria: String, stock: int)
        .. Getters ..
        + getId(): int
        + getNombre(): String
        + getPrecio(): BigDecimal
        + getCategoria(): String
        + getStock(): int
        + isActivo(): boolean
        .. Setters ..
        + setNombre(nombre: String): void
        + setPrecio(precio: BigDecimal): void
        + setCategoria(categoria: String): void
        + setStock(stock: int): void
        + setActivo(activo: boolean): void
        .. Controladores ..
        + actualizarStock(cantidad: int): void
        + validarDisponibilidad(cantidadRequerida: Integer): boolean
        + {abstract} mostrarDetalles(): String
    }

    class Venta {
        - **id**: int <<PK>>
        - **idCliente**: int <<FK>>
        - productosVenta: List<ProductoVenta>
        - subtotal: BigDecimal
        - impuestos: BigDecimal
        - total: BigDecimal
        - fechaCreacion: LocalDateTime
        - estado: EstadoVenta
        --
        .. Constructores ..
        + Venta(idCliente: int, fecha: LocalDateTime)
        .. Getters ..
        + getId(): int
        + getIdCliente(): int
        + getProductosVenta(): List<ProductoVenta>
        + getSubtotal(): BigDecimal
        + getImpuestos(): BigDecimal
        + getTotal(): BigDecimal
        + getFechaCreacion(): LocalDateTime
        + getEstado(): EstadoVenta
        .. Controladores ..
        + agregarProducto(producto: Producto, cantidad: int): boolean
        + removerProducto(idProductoVenta: int): boolean
        + calcularTotal(): boolean
        + finalizarVenta(): boolean
    }

    class ProductoVenta {
        - **id**: int <<PK>>
        - **idProducto**: int <<FK>>
        - **idVenta**: int <<FK>>
        - cantidad: int
        - precioUnitario: BigDecimal
        - subtotal: BigDecimal
        --
        .. Constructores ..
        + ProductoVenta(idProducto: int, idVenta: int, cantidad: int, precioUnitario: BigDecimal)
        .. Getters ..
        + getId(): int
        + getIdProducto(): int
        + getIdVenta(): int
        + getCantidad(): int
        + getPrecioUnitario(): BigDecimal
        + getSubtotal(): BigDecimal
        .. Setters ..
        + setCantidad(cantidad: int): void
        .. Controladores ..
        + calcularSubtotal(): BigDecimal
    }

    class ProductoElectronica extends Producto {
        - marca: String
        - modelo: String
        --
        .. Constructores ..
        + ProductoElectronica(nombre: String, precio: BigDecimal, categoria: String, stock: int, marca: String, modelo: String)
        .. Getters ..
        + getMarca(): String
        + getModelo(): String
        .. Setters ..
        + setMarca(marca: String): void
        + setModelo(modelo: String): void
        .. Controladores ..
        + mostrarDetalles(): String <<override>>
    }

    class ProductoRopa extends Producto {
        - talla: String
        - color: String
        --
        .. Constructores ..
        + ProductoRopa(nombre: String, precio: BigDecimal, categoria: String, stock: int, talla: String, color: String)
        .. Getters ..
        + getTalla(): String
        + getColor(): String
        .. Setters ..
        + setTalla(talla: String): void
        + setColor(color: String): void
        .. Controladores ..
        + mostrarDetalles(): String <<override>>
    }

    '=== Enumeraciones ===
    enum EstadoVenta {
        PROCESANDO
        COMPLETADA
    }

}

package dreams #888888 {

    class App {
        - clientes: List<Cliente>
        - productos: List<Producto>
        - ventas: List<Venta>
        --
        .. Controladores de Cliente ..
        + agregarCliente(cliente: Cliente): void
        + eliminarCliente(id: int): boolean
        + buscarCliente(id: int): Cliente
        + obtenerTodosLosClientes(): List<Cliente>
        .. Controladores de Producto ..
        + agregarProducto(producto: Producto): void
        + eliminarProducto(id: int): boolean
        + buscarProducto(id: int): Producto
        + obtenerTodosLosProductos(): List<Producto>
        .. Controladores de Venta ..
        + iniciarNuevaVenta(idCliente: int): Venta
        + agregarProductoAVenta(idVenta: int, idProducto: int, cantidad: int): boolean
        + finalizarVenta(idVenta: int): boolean
        + obtenerTodasLasVentas(): List<Venta>
        --
        + {static} main(): void
    }

}

' === Relaciones ===

' --- Asociación ---
Tienda "1" -- "0..*" Cliente : atiende
Cliente "1" -- "0..*" Venta : realiza
ProductoVenta "0..*" -- "1" Producto : se refiere a

' --- Agregación ---
Venta "1" o-- "0..*" ProductoVenta : contiene
Tienda "1" o-- "0..*" Producto : vende
App "1" o-- "0..*" Cliente : gestiona
App "1" o-- "0..*" Producto : gestiona
App "1" o-- "0..*" Venta : gestiona

' --- Composición ---
Tienda "1" *-- "0..*" Venta : registra

' --- Herencia ---
Producto <|-- ProductoElectronica : extiende
Producto <|-- ProductoRopa : extiende

' --- Dependencia ---
Venta ..> EstadoVenta : está

' === Layout ===
hide @unlinked

@enduml
