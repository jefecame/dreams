@startuml Dreams Sales System - Architecture Diagram

!theme blueprint

' Configuration
skinparam backgroundColor transparent
skinparam shadowing false
skinparam linetype ortho
skinparam componentStyle rectangle

' Modern color scheme
skinparam component {
    BackgroundColor #E8F4FD
    BorderColor #2E86AB
    FontColor #1F4E79
}

skinparam package {
    BackgroundColor #F8F9FA
    BorderColor #6C757D
    FontColor #212529
}

skinparam interface {
    BackgroundColor #28A745
    BorderColor #1E7E34
    FontColor White
}

title Dreams Sales System - System Architecture\n<size:14><color:gray>Layered Architecture with Clean Code Principles</color></size>

' === EXTERNAL ACTORS ===
actor "🌐 Web Users" as WebUsers #LightBlue
actor "📱 Mobile Users" as MobileUsers #LightGreen  
actor "🏪 POS Systems" as POSSystems #Orange
actor "👨‍💼 Administrators" as Admins #LightCoral

' === PRESENTATION LAYER ===
package "🖥️ Presentation Layer" #LightBlue {
    
    component "🌐 Web Application" as WebApp {
        component "React Frontend" as ReactApp
        component "Redux Store" as ReduxStore
        component "UI Components" as UIComponents
    }
    
    component "📱 Mobile Application" as MobileApp {
        component "Flutter/React Native" as MobileFramework
        component "Mobile State Management" as MobileState
    }
    
    component "🖨️ POS Interface" as POSInterface {
        component "Desktop Client" as DesktopClient
        component "Touch Interface" as TouchUI
    }
    
    component "⚙️ Admin Dashboard" as AdminDashboard {
        component "Management Console" as ManagementConsole
        component "Analytics Dashboard" as Analytics
        component "System Monitor" as SystemMonitor
    }
}

' === API LAYER ===
package "🔌 API Gateway & Services" #LightYellow {
    
    interface "🚪 API Gateway" as APIGateway #LightGreen
    
    component "🔐 Authentication Service" as AuthService
    component "🛡️ Authorization Service" as AuthzService
    component "📊 Rate Limiting" as RateLimit
    component "📝 API Logging" as APILogging
}

' === APPLICATION LAYER ===
package "🏗️ Application Layer" #LightGreen {
    
    package "🛒 Sales Domain" #PowderBlue {
        component "Sales Controller" as SalesController
        component "Cart Controller" as CartController
        component "Order Controller" as OrderController
        component "Invoice Controller" as InvoiceController
    }
    
    package "📦 Product Domain" #MistyRose {
        component "Product Controller" as ProductController
        component "Inventory Controller" as InventoryController
        component "Category Controller" as CategoryController
    }
    
    package "👥 Customer Domain" #LightGoldenRodYellow {
        component "Customer Controller" as CustomerController
        component "Profile Controller" as ProfileController
    }
    
    package "📊 Analytics Domain" #Lavender {
        component "Reports Controller" as ReportsController
        component "Analytics Controller" as AnalyticsController
    }
}

' === BUSINESS LAYER ===
package "💼 Business Logic Layer" #Orange {
    
    package "🎯 Core Services" #LightSalmon {
        component "Sales Service" as SalesService
        component "Product Service" as ProductService
        component "Customer Service" as CustomerService
        component "Inventory Service" as InventoryService
        component "Payment Service" as PaymentService
        component "Notification Service" as NotificationService
    }
    
    package "🔧 Domain Services" #PeachPuff {
        component "Tax Calculator" as TaxCalculator
        component "Discount Engine" as DiscountEngine
        component "Stock Manager" as StockManager
        component "Price Calculator" as PriceCalculator
    }
    
    package "⚡ Event Handlers" #Moccasin {
        component "Sale Completed Handler" as SaleHandler
        component "Stock Updated Handler" as StockHandler
        component "Customer Created Handler" as CustomerHandler
    }
}

' === INFRASTRUCTURE LAYER ===
package "🏭 Infrastructure Layer" #LightCoral {
    
    package "💾 Data Access" #RosyBrown {
        component "Customer Repository" as CustomerRepo
        component "Product Repository" as ProductRepo
        component "Sales Repository" as SalesRepo
        component "Inventory Repository" as InventoryRepo
        component "User Repository" as UserRepo
    }
    
    package "🔌 External Integrations" #LightPink {
        component "Payment Gateway" as PaymentGateway
        component "Email Service" as EmailService
        component "SMS Service" as SMSService
        component "Print Service" as PrintService
        component "Tax API" as TaxAPI
    }
    
    package "🗄️ Data Storage" #Silver {
        database "🗃️ PostgreSQL\nMain Database" as MainDB
        database "📊 Redis\nCache & Sessions" as CacheDB
        database "📈 InfluxDB\nMetrics & Analytics" as MetricsDB
        database "📁 File Storage\nDocuments & Images" as FileStorage
    }
}

' === CROSS-CUTTING CONCERNS ===
package "🛡️ Cross-Cutting Concerns" #LightGray {
    component "📝 Logging Service" as LoggingService
    component "📊 Monitoring & Metrics" as MonitoringService
    component "🔍 Health Checks" as HealthService
    component "⚡ Event Bus" as EventBus
    component "🔧 Configuration Manager" as ConfigManager
    component "🧪 Feature Flags" as FeatureFlags
}

' === EXTERNAL SYSTEMS ===
package "🌍 External Systems" #LightSteelBlue {
    component "💳 Payment Processors" as PaymentProcessors
    component "📧 Email Providers" as EmailProviders  
    component "📱 SMS Gateways" as SMSGateways
    component "🏛️ Tax Authorities" as TaxAuthorities
    component "📊 Analytics Platforms" as AnalyticsPlatforms
}

' === CONNECTIONS ===

' User to Presentation
WebUsers --> WebApp
MobileUsers --> MobileApp
POSSystems --> POSInterface
Admins --> AdminDashboard

' Presentation to API Gateway
WebApp --> APIGateway
MobileApp --> APIGateway
POSInterface --> APIGateway
AdminDashboard --> APIGateway

' API Gateway to Application Layer
APIGateway --> SalesController
APIGateway --> ProductController
APIGateway --> CustomerController
APIGateway --> ReportsController

' API Gateway Components
APIGateway ..> AuthService
APIGateway ..> AuthzService
APIGateway ..> RateLimit
APIGateway ..> APILogging

' Application to Business Layer
SalesController --> SalesService
CartController --> SalesService
ProductController --> ProductService
CustomerController --> CustomerService
InventoryController --> InventoryService

' Business Layer Internal
SalesService --> TaxCalculator
SalesService --> DiscountEngine
SalesService --> PaymentService
ProductService --> StockManager
SalesService --> NotificationService

' Business to Infrastructure
SalesService --> SalesRepo
ProductService --> ProductRepo
CustomerService --> CustomerRepo
InventoryService --> InventoryRepo
PaymentService --> PaymentGateway
NotificationService --> EmailService

' Repositories to Databases
CustomerRepo --> MainDB
ProductRepo --> MainDB
SalesRepo --> MainDB
InventoryRepo --> MainDB
UserRepo --> MainDB

' Cache connections
SalesService --> CacheDB
ProductService --> CacheDB

' Analytics connections
AnalyticsController --> MetricsDB
MonitoringService --> MetricsDB

' External integrations
PaymentGateway --> PaymentProcessors
EmailService --> EmailProviders
SMSService --> SMSGateways
TaxCalculator --> TaxAuthorities
AnalyticsController --> AnalyticsPlatforms

' Cross-cutting concerns
SalesService ..> LoggingService
ProductService ..> LoggingService
CustomerService ..> LoggingService
SalesService ..> EventBus
ProductService ..> EventBus

' Event Handlers
EventBus --> SaleHandler
EventBus --> StockHandler
EventBus --> CustomerHandler

' === NOTES ===
note top of APIGateway
    **Single Entry Point**
    • Request routing
    • Authentication/Authorization  
    • Rate limiting
    • Request/Response logging
    • API versioning
end note

note right of SalesService
    **Core Business Logic**
    • Domain rules enforcement
    • Transaction management
    • Business workflows
    • Event publishing
end note

note bottom of MainDB
    **ACID Transactions**
    • Customer data
    • Product catalog
    • Sales records
    • Inventory tracking
    • User accounts
end note

note left of EventBus
    **Async Processing**
    • Decoupled communication
    • Event-driven architecture
    • Scalable workflows
    • Audit trail
end note

@enduml
