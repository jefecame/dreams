@startuml Dreams System Model v1.0.3

!theme aws-orange

' Configuration
skinparam classAttributeIconSize 0
skinparam backgroundColor transparent
skinparam shadowing false
skinparam linetype ortho
skinparam packageStyle rectangle
skinparam roundcorner 15
skinparam arrowThickness 2

' Modern color scheme
skinparam class {
    BackgroundColor White
    BorderColor #FF6B35
    ArrowColor #004E89
    FontColor #2A2A2A
}

skinparam package {
    BackgroundColor #004E89
    BorderColor #FF6B35
    FontColor White
    FontSize 12
}

skinparam enum {
    BackgroundColor #FFE66D
    BorderColor #FF6B35
}

skinparam interface {
    BackgroundColor #A7C6ED
    BorderColor #004E89
}

' Header with version and description
title **Dreams Sales System** - Enhanced Architecture v1.0.3\n<size:16><color:#004E89>üèóÔ∏è Layered Architecture with Modern Java Features</color></size>\n<size:12><color:gray>Service Layer ‚Ä¢ Repository Pattern ‚Ä¢ DTOs ‚Ä¢ Result Pattern ‚Ä¢ Comprehensive Testing</color></size>

' === PRESENTATION LAYER ===
package "üñ•Ô∏è Presentation Layer" #LightSkyBlue {
    
    class Dreams <<Main Application>> {
        + {static} main(args: String[]): void
        + mostrarMenuPrincipal(): void
        - inicializarAplicacion(): void
        - cargarConfiguracion(): void
    }
    
    class MenuClientes <<View Controller>> {
        - clienteService: ClienteService
        --
        + {static} mostrarMenuClientes(): void
        + {static} crearCliente(): void
        + {static} leerCliente(): void
        + {static} actualizarCliente(): void
        + {static} eliminarCliente(): void
        + {static} listarClientes(): void
        - validarEntradaCliente(): boolean
        - mostrarErrores(errores: List<String>): void
    }
    
    class MenuProductos <<View Controller>> {
        - productoService: ProductoService
        --
        + {static} mostrarMenuProductos(): void
        + {static} crearProducto(): void
        + {static} leerProducto(): void
        + {static} actualizarProducto(): void
        + {static} eliminarProducto(): void
        + {static} listarProductos(): void
        - validarEntradaProducto(): boolean
        - mostrarInventarioBajo(): void
    }
    
    class MenuVentas <<View Controller>> {
        - ventaService: VentaService
        - reporteService: ReporteService
        --
        + {static} mostrarMenuVentas(): void
        + {static} crearVenta(): void
        + {static} leerVenta(): void
        + {static} actualizarVenta(): void
        + {static} cancelarVenta(): void
        + {static} listarVentas(): void
        + {static} generarReporteVentas(): void
        - procesarCarritoCompras(): void
        - confirmarVenta(): boolean
    }
}

' === SERVICE LAYER ===
package "‚öôÔ∏è Service Layer" #LightGreen {
    
    interface ClienteService <<Service>> {
        + crear(dto: CrearClienteDTO): Result<ClienteDTO>
        + buscarPorId(id: UUID): Optional<ClienteDTO>
        + buscarPorEmail(email: String): Optional<ClienteDTO>
        + actualizar(id: UUID, dto: ActualizarClienteDTO): Result<ClienteDTO>
        + desactivar(id: UUID): Result<Boolean>
        + listarActivos(): List<ClienteDTO>
        + validarEmail(email: String): ValidationResult
    }
    
    class ClienteServiceImpl <<Service Implementation>> {
        - clienteRepository: ClienteRepository
        - validator: ClienteValidator
        --
        + crear(dto: CrearClienteDTO): Result<ClienteDTO>
        + buscarPorId(id: UUID): Optional<ClienteDTO>
        + buscarPorEmail(email: String): Optional<ClienteDTO>
        + actualizar(id: UUID, dto: ActualizarClienteDTO): Result<ClienteDTO>
        + desactivar(id: UUID): Result<Boolean>
        + listarActivos(): List<ClienteDTO>
        + validarEmail(email: String): ValidationResult
        - convertirADTO(cliente: Cliente): ClienteDTO
        - aplicarActualizaciones(cliente: Cliente, dto: ActualizarClienteDTO): void
    }
    
    interface ProductoService <<Service>> {
        + crear(dto: CrearProductoDTO): Result<ProductoDTO>
        + buscarPorId(id: Long): Optional<ProductoDTO>
        + buscarPorCategoria(categoria: CategoriaProducto): List<ProductoDTO>
        + actualizar(id: Long, dto: ActualizarProductoDTO): Result<ProductoDTO>
        + actualizarStock(id: Long, cantidad: Integer): Result<ProductoDTO>
        + verificarDisponibilidad(id: Long, cantidad: Integer): boolean
        + listarActivos(): List<ProductoDTO>
        + obtenerProductosBajoStock(): List<ProductoDTO>
    }
    
    class ProductoServiceImpl <<Service Implementation>> {
        - productoRepository: ProductoRepository
        - validator: ProductoValidator
        --
        + crear(dto: CrearProductoDTO): Result<ProductoDTO>
        + buscarPorId(id: Long): Optional<ProductoDTO>
        + buscarPorCategoria(categoria: CategoriaProducto): List<ProductoDTO>
        + actualizar(id: Long, dto: ActualizarProductoDTO): Result<ProductoDTO>
        + actualizarStock(id: Long, cantidad: Integer): Result<ProductoDTO>
        + verificarDisponibilidad(id: Long, cantidad: Integer): boolean
        + listarActivos(): List<ProductoDTO>
        + obtenerProductosBajoStock(): List<ProductoDTO>
        - convertirADTO(producto: Producto): ProductoDTO
        - validarStockSuficiente(producto: Producto, cantidad: Integer): boolean
    }
    
    interface VentaService <<Service>> {
        + crear(dto: CrearVentaDTO): Result<VentaDTO>
        + buscarPorId(id: Long): Optional<VentaDTO>
        + agregarProducto(ventaId: Long, dto: AgregarProductoDTO): Result<VentaDTO>
        + removerProducto(ventaId: Long, productoVentaId: Long): Result<VentaDTO>
        + procesar(id: Long): Result<VentaDTO>
        + cancelar(id: Long, motivo: String): Result<VentaDTO>
        + listarPorCliente(clienteId: UUID): List<VentaDTO>
        + calcularEstadisticas(fechaInicio: LocalDate, fechaFin: LocalDate): EstadisticasVentaDTO
    }
    
    class VentaServiceImpl <<Service Implementation>> {
        - ventaRepository: VentaRepository
        - productoService: ProductoService
        - clienteService: ClienteService
        - validator: VentaValidator
        --
        + crear(dto: CrearVentaDTO): Result<VentaDTO>
        + buscarPorId(id: Long): Optional<VentaDTO>
        + agregarProducto(ventaId: Long, dto: AgregarProductoDTO): Result<VentaDTO>
        + removerProducto(ventaId: Long, productoVentaId: Long): Result<VentaDTO>
        + procesar(id: Long): Result<VentaDTO>
        + cancelar(id: Long, motivo: String): Result<VentaDTO>
        + listarPorCliente(clienteId: UUID): List<VentaDTO>
        + calcularEstadisticas(fechaInicio: LocalDate, fechaFin: LocalDate): EstadisticasVentaDTO
        - validarDisponibilidadProductos(items: List<AgregarProductoDTO>): ValidationResult
        - calcularTotales(venta: Venta): void
        - aplicarReglasPrecio(venta: Venta): void
    }
    
    interface ReporteService <<Service>> {
        + generarReporteVentas(filtros: FiltrosReporteDTO): ReporteVentasDTO
        + generarReporteInventario(): ReporteInventarioDTO
        + generarReporteClientes(): ReporteClientesDTO
        + exportarAPDF(reporte: ReporteDTO): Result<byte[]>
        + exportarAExcel(reporte: ReporteDTO): Result<byte[]>
    }
    
    class ReporteServiceImpl <<Service Implementation>> {
        - ventaRepository: VentaRepository
        - productoRepository: ProductoRepository
        - clienteRepository: ClienteRepository
        --
        + generarReporteVentas(filtros: FiltrosReporteDTO): ReporteVentasDTO
        + generarReporteInventario(): ReporteInventarioDTO
        + generarReporteClientes(): ReporteClientesDTO
        + exportarAPDF(reporte: ReporteDTO): Result<byte[]>
        + exportarAExcel(reporte: ReporteDTO): Result<byte[]>
        - calcularMetricasVenta(ventas: List<Venta>): MetricasVentaDTO
        - generarGraficos(datos: Object): byte[]
    }
}

' === DATA TRANSFER OBJECTS ===
package "üì¶ Data Transfer Objects" #LightYellow {
    
    ' Cliente DTOs
    record CrearClienteDTO(String nombre, String email) {}
    record ActualizarClienteDTO(String nombre, String email) {}
    record ClienteDTO(UUID id, String nombre, String email, LocalDateTime fechaCreacion, boolean activo) {}
    
    ' Producto DTOs  
    record CrearProductoDTO(String nombre, BigDecimal precio, CategoriaProducto categoria, Integer stockMinimo) {}
    record ActualizarProductoDTO(String nombre, BigDecimal precio, Integer stockMinimo) {}
    record ProductoDTO(Long id, String nombre, BigDecimal precio, CategoriaProducto categoria, Integer stock, Integer stockMinimo, boolean activo, LocalDateTime fechaCreacion) {}
    
    ' Venta DTOs
    record CrearVentaDTO(UUID clienteId, List<AgregarProductoDTO> productos) {}
    record AgregarProductoDTO(Long productoId, Integer cantidad) {}
    record VentaDTO(Long id, UUID clienteId, List<ProductoVentaDTO> productos, BigDecimal total, EstadoVenta estado, LocalDateTime fechaCreacion) {}
    record ProductoVentaDTO(Long id, Long productoId, String nombreProducto, Integer cantidad, BigDecimal precioUnitario, BigDecimal subtotal) {}
    
    ' Reporte DTOs
    record FiltrosReporteDTO(LocalDate fechaInicio, LocalDate fechaFin, UUID clienteId, CategoriaProducto categoria) {}
    record ReporteVentasDTO(List<VentaDTO> ventas, MetricasVentaDTO metricas, byte[] grafico) {}
    record ReporteInventarioDTO(List<ProductoDTO> productos, Integer totalProductos, BigDecimal valorInventario) {}
    record MetricasVentaDTO(BigDecimal totalVentas, Integer numeroVentas, BigDecimal ventaPromedio, ProductoDTO productoMasVendido) {}
    
    ' Estad√≠sticas
    record EstadisticasVentaDTO(BigDecimal ventasTotales, Integer numeroVentas, BigDecimal ventaPromedio, LocalDate fechaUltimaVenta) {}
}

' === DOMAIN LAYER ===
package "üèõÔ∏è Domain Layer" #LightCoral {
    
    ' === Entities ===
    class Cliente <<Entity>> {
        - {field} **id**: UUID <<PK>>
        - {field} nombre: String
        - {field} email: String
        - {field} fechaCreacion: LocalDateTime
        - {field} fechaActualizacion: LocalDateTime
        - {field} activo: boolean
        ==
        ' === Constructors ===
        + Cliente(nombre: String, email: String)
        + Cliente(id: UUID, nombre: String, email: String)
        ==
        ' === Accessors ===
        + getId(): UUID
        + getNombre(): String
        + getEmail(): String
        + getFechaCreacion(): LocalDateTime
        + getFechaActualizacion(): LocalDateTime
        + isActivo(): boolean
        ==
        ' === Business Methods ===
        + actualizarInformacion(nombre: String, email: String): void
        + desactivar(): void
        + activar(): void
        + validarEmail(): boolean
        + {static} crear(nombre: String, email: String): Result<Cliente>
        - actualizar(): void
        - validarDatos(): ValidationResult
    }
    
    class Producto <<Entity>> {
        - {field} **id**: Long <<PK>>
        - {field} nombre: String
        - {field} precio: BigDecimal
        - {field} categoria: CategoriaProducto
        - {field} stock: Integer
        - {field} stockMinimo: Integer
        - {field} activo: boolean
        - {field} fechaCreacion: LocalDateTime
        - {field} fechaActualizacion: LocalDateTime
        ==
        ' === Constructors ===
        + Producto(nombre: String, precio: BigDecimal, categoria: CategoriaProducto)
        + Producto(id: Long, nombre: String, precio: BigDecimal, categoria: CategoriaProducto, stock: Integer)
        ==
        ' === Accessors ===
        + getId(): Long
        + getNombre(): String
        + getPrecio(): BigDecimal
        + getCategoria(): CategoriaProducto
        + getStock(): Integer
        + getStockMinimo(): Integer
        + isActivo(): boolean
        ==
        ' === Business Methods ===
        + actualizarStock(cantidad: Integer): Result<Boolean>
        + validarDisponibilidad(cantidadRequerida: Integer): boolean
        + necesitaReposicion(): boolean
        + calcularValorInventario(): BigDecimal
        + aplicarDescuento(porcentaje: BigDecimal): BigDecimal
        + {static} crear(nombre: String, precio: BigDecimal, categoria: CategoriaProducto): Result<Producto>
        - validarPrecio(precio: BigDecimal): boolean
        - validarStock(cantidad: Integer): boolean
    }
    
    class Venta <<Aggregate Root>> {
        - {field} **id**: Long <<PK>>
        - {field} **clienteId**: UUID <<FK>>
        - {field} productosVenta: List<ProductoVenta>
        - {field} subtotal: BigDecimal
        - {field} impuestos: BigDecimal
        - {field} descuentos: BigDecimal
        - {field} total: BigDecimal
        - {field} fechaCreacion: LocalDateTime
        - {field} fechaActualizacion: LocalDateTime
        - {field} estado: EstadoVenta
        - {field} numeroFactura: String
        - {field} observaciones: String
        ==
        ' === Constructors ===
        + Venta(clienteId: UUID)
        + Venta(id: Long, clienteId: UUID, fecha: LocalDateTime)
        ==
        ' === Accessors ===
        + getId(): Long
        + getClienteId(): UUID
        + getProductosVenta(): List<ProductoVenta>
        + getTotal(): BigDecimal
        + getSubtotal(): BigDecimal
        + getImpuestos(): BigDecimal
        + getDescuentos(): BigDecimal
        + getEstado(): EstadoVenta
        + getNumeroFactura(): String
        ==
        ' === Business Methods ===
        + agregarProducto(productoId: Long, cantidad: Integer, precio: BigDecimal): Result<ProductoVenta>
        + removerProducto(productoVentaId: Long): Result<Boolean>
        + actualizarCantidad(productoVentaId: Long, nuevaCantidad: Integer): Result<Boolean>
        + aplicarDescuento(porcentaje: BigDecimal): void
        + procesar(): Result<Boolean>
        + cancelar(motivo: String): Result<Boolean>
        + completar(): Result<Boolean>
        + calcularTotales(): void
        + validarParaProcesar(): ValidationResult
        + {static} crear(clienteId: UUID): Result<Venta>
        - recalcularTotales(): void
        - generarNumeroFactura(): String
        - validarEstadoTransicion(nuevoEstado: EstadoVenta): boolean
    }
    
    class ProductoVenta <<Value Object>> {
        - {field} **id**: Long <<PK>>
        - {field} **productoId**: Long <<FK>>
        - {field} **ventaId**: Long <<FK>>
        - {field} cantidad: Integer
        - {field} precioUnitario: BigDecimal
        - {field} subtotal: BigDecimal
        - {field} descuento: BigDecimal
        - {field} fechaAgregado: LocalDateTime
        ==
        ' === Constructors ===
        + ProductoVenta(productoId: Long, ventaId: Long, cantidad: Integer, precioUnitario: BigDecimal)
        ==
        ' === Accessors ===
        + getId(): Long
        + getProductoId(): Long
        + getVentaId(): Long
        + getCantidad(): Integer
        + getPrecioUnitario(): BigDecimal
        + getSubtotal(): BigDecimal
        + getDescuento(): BigDecimal
        ==
        ' === Business Methods ===
        + actualizarCantidad(nuevaCantidad: Integer): Result<Boolean>
        + aplicarDescuento(descuento: BigDecimal): void
        + calcularSubtotal(): BigDecimal
        + validarCantidad(): boolean
        + {static} crear(productoId: Long, ventaId: Long, cantidad: Integer, precio: BigDecimal): Result<ProductoVenta>
        - validarDatos(): ValidationResult
    }
    
    ' === Value Objects ===
    class Result<T> <<Value Object>> {
        - {field} success: boolean
        - {field} value: T
        - {field} error: ErrorInfo
        - {field} validationErrors: List<String>
        ==
        + {static} success(value: T): Result<T>
        + {static} failure(error: ErrorInfo): Result<T>
        + {static} validationFailure(errors: List<String>): Result<T>
        + isSuccess(): boolean
        + isFailure(): boolean
        + getValue(): T
        + getError(): ErrorInfo
        + getValidationErrors(): List<String>
        + map(mapper: Function<T, R>): Result<R>
        + flatMap(mapper: Function<T, Result<R>>): Result<R>
    }
    
    class ValidationResult <<Value Object>> {
        - {field} valid: boolean
        - {field} errors: List<String>
        ==
        + {static} valid(): ValidationResult
        + {static} invalid(errors: List<String>): ValidationResult
        + isValid(): boolean
        + getErrors(): List<String>
        + combine(other: ValidationResult): ValidationResult
    }
    
    record ErrorInfo(String code, String message, Throwable cause) {}
    
    ' === Enumerations ===
    enum EstadoVenta {
        BORRADOR
        PENDIENTE
        PROCESANDO
        COMPLETADA
        CANCELADA
        REEMBOLSADA
        --
        + puedeTransicionarA(nuevoEstado: EstadoVenta): boolean
        + esEstadoFinal(): boolean
    }
    
    enum CategoriaProducto {
        ELECTRONICA("Electr√≥nica")
        ROPA_Y_ACCESORIOS("Ropa y Accesorios")
        HOGAR_Y_JARDIN("Hogar y Jard√≠n")
        DEPORTES_Y_RECREACION("Deportes y Recreaci√≥n")
        SALUD_Y_BELLEZA("Salud y Belleza")
        LIBROS_Y_MEDIOS("Libros y Medios")
        OTROS("Otros")
        --
        - descripcion: String
        + getDescripcion(): String
        + {static} fromString(descripcion: String): Optional<CategoriaProducto>
    }
}

' === REPOSITORY LAYER ===
package "üóÑÔ∏è Repository Layer" #LightPink {
    
    interface ClienteRepository <<Repository>> {
        + save(cliente: Cliente): Cliente
        + findById(id: UUID): Optional<Cliente>
        + findByEmail(email: String): Optional<Cliente>
        + findAllActive(): List<Cliente>
        + update(cliente: Cliente): Cliente
        + deleteById(id: UUID): boolean
        + existsByEmail(email: String): boolean
    }
    
    interface ProductoRepository <<Repository>> {
        + save(producto: Producto): Producto
        + findById(id: Long): Optional<Producto>
        + findByCategoria(categoria: CategoriaProducto): List<Producto>
        + findAllActive(): List<Producto>
        + findProductosBajoStock(): List<Producto>
        + update(producto: Producto): Producto
        + deleteById(id: Long): boolean
        + countByCategoria(categoria: CategoriaProducto): Long
    }
    
    interface VentaRepository <<Repository>> {
        + save(venta: Venta): Venta
        + findById(id: Long): Optional<Venta>
        + findByClienteId(clienteId: UUID): List<Venta>
        + findByEstado(estado: EstadoVenta): List<Venta>
        + findByFechaBetween(inicio: LocalDateTime, fin: LocalDateTime): List<Venta>
        + update(venta: Venta): Venta
        + deleteById(id: Long): boolean
        + findVentasConEstadisticas(filtros: FiltrosReporteDTO): List<Venta>
    }
    
    ' Repository implementations (in-memory for now)
    class InMemoryClienteRepository <<Repository Implementation>> {
        - clientes: Map<UUID, Cliente>
        - idGenerator: AtomicLong
        --
        + save(cliente: Cliente): Cliente
        + findById(id: UUID): Optional<Cliente>
        + findByEmail(email: String): Optional<Cliente>
        + findAllActive(): List<Cliente>
        + update(cliente: Cliente): Cliente
        + deleteById(id: UUID): boolean
        + existsByEmail(email: String): boolean
        - generarId(): UUID
    }
    
    class InMemoryProductoRepository <<Repository Implementation>> {
        - productos: Map<Long, Producto>
        - idGenerator: AtomicLong
        --
        + save(producto: Producto): Producto
        + findById(id: Long): Optional<Producto>
        + findByCategoria(categoria: CategoriaProducto): List<Producto>
        + findAllActive(): List<Producto>
        + findProductosBajoStock(): List<Producto>
        + update(producto: Producto): Producto
        + deleteById(id: Long): boolean
        + countByCategoria(categoria: CategoriaProducto): Long
        - generarId(): Long
    }
    
    class InMemoryVentaRepository <<Repository Implementation>> {
        - ventas: Map<Long, Venta>
        - idGenerator: AtomicLong
        --
        + save(venta: Venta): Venta
        + findById(id: Long): Optional<Venta>
        + findByClienteId(clienteId: UUID): List<Venta>
        + findByEstado(estado: EstadoVenta): List<Venta>
        + findByFechaBetween(inicio: LocalDateTime, fin: LocalDateTime): List<Venta>
        + update(venta: Venta): Venta
        + deleteById(id: Long): boolean
        + findVentasConEstadisticas(filtros: FiltrosReporteDTO): List<Venta>
        - generarId(): Long
    }
}

' === VALIDATION LAYER ===
package "‚úÖ Validation Layer" #LightSalmon {
    
    interface ClienteValidator <<Validator>> {
        + validarCreacion(dto: CrearClienteDTO): ValidationResult
        + validarActualizacion(dto: ActualizarClienteDTO): ValidationResult
        + validarEmail(email: String): ValidationResult
    }
    
    class ClienteValidatorImpl <<Validator Implementation>> {
        + validarCreacion(dto: CrearClienteDTO): ValidationResult
        + validarActualizacion(dto: ActualizarClienteDTO): ValidationResult
        + validarEmail(email: String): ValidationResult
        - validarNombre(nombre: String): ValidationResult
        - validarFormatoEmail(email: String): boolean
        - validarLongitudCampos(nombre: String, email: String): ValidationResult
    }
    
    interface ProductoValidator <<Validator>> {
        + validarCreacion(dto: CrearProductoDTO): ValidationResult
        + validarActualizacion(dto: ActualizarProductoDTO): ValidationResult
        + validarStock(cantidad: Integer): ValidationResult
    }
    
    class ProductoValidatorImpl <<Validator Implementation>> {
        + validarCreacion(dto: CrearProductoDTO): ValidationResult
        + validarActualizacion(dto: ActualizarProductoDTO): ValidationResult
        + validarStock(cantidad: Integer): ValidationResult
        - validarPrecio(precio: BigDecimal): ValidationResult
        - validarNombre(nombre: String): ValidationResult
        - validarCategoria(categoria: CategoriaProducto): ValidationResult
    }
    
    interface VentaValidator <<Validator>> {
        + validarCreacion(dto: CrearVentaDTO): ValidationResult
        + validarAgregarProducto(dto: AgregarProductoDTO): ValidationResult
        + validarProcesamiento(venta: Venta): ValidationResult
    }
    
    class VentaValidatorImpl <<Validator Implementation>> {
        + validarCreacion(dto: CrearVentaDTO): ValidationResult
        + validarAgregarProducto(dto: AgregarProductoDTO): ValidationResult
        + validarProcesamiento(venta: Venta): ValidationResult
        - validarCantidad(cantidad: Integer): ValidationResult
        - validarEstadoVenta(estado: EstadoVenta): ValidationResult
        - validarProductosVenta(productos: List<ProductoVenta>): ValidationResult
    }
}

' === CONFIGURATION ===
package "‚öôÔ∏è Configuration" #LightGray {
    
    class AppConfig <<Configuration>> {
        - {field} taxRate: BigDecimal
        - {field} defaultStockMinimo: Integer
        - {field} currencyFormat: String
        - {field} reportFormats: List<String>
        ==
        + {static} getInstance(): AppConfig
        + getTaxRate(): BigDecimal
        + getDefaultStockMinimo(): Integer
        + getCurrencyFormat(): String
        + getReportFormats(): List<String>
        + loadFromProperties(file: String): void
        - validate(): boolean
    }
    
    class DatabaseConfig <<Configuration>> {
        - {field} url: String
        - {field} username: String
        - {field} password: String
        - {field} maxConnections: Integer
        ==
        + getUrl(): String
        + getUsername(): String
        + getPassword(): String
        + getMaxConnections(): Integer
        + isValid(): boolean
    }
}

' === TESTING LAYER ===
package "üß™ Enhanced Testing Layer" #LightBlue {
    
    class DreamsApplicationTests <<Integration Test>> {
        - testDataManager: TestDataManager {static}
        - clienteService: ClienteService
        - productoService: ProductoService
        - ventaService: VentaService
        ==
        ' === Setup/Teardown ===
        + {static} beforeAll(): void
        + {static} afterAll(): void
        + setUp(): void
        + tearDown(): void
        ==
        ' === Integration Tests ===
        + testCrearVentaCompleta_FlowCompleto_Success(): void
        + testProcesarVenta_ConValidaciones_Success(): void
        + testCancelarVenta_ConReembolso_Success(): void
        + testGenerarReporte_ConDatos_Success(): void
        + testValidacionesIntegradas_ConErrores_HandledCorrectly(): void
        ==
        ' === Performance Tests ===
        + testRendimiento_CrearMultiplesVentas_WithinThreshold(): void
        + testConcurrencia_MultipleUsers_ThreadSafe(): void
        ==
        ' === Edge Cases ===
        + testStockInsuficiente_VentaGrande_ReturnsError(): void
        + testClienteInactivo_CrearVenta_ReturnsError(): void
    }
    
    class ClienteServiceTest <<Unit Test>> {
        - clienteService: ClienteService
        - mockClienteRepository: ClienteRepository
        - mockValidator: ClienteValidator
        ==
        + setUp(): void
        + testCrearCliente_DatosValidos_Success(): void
        + testCrearCliente_EmailDuplicado_ReturnsError(): void
        + testBuscarCliente_Existente_ReturnsCliente(): void
        + testActualizarCliente_DatosValidos_Success(): void
        + testDesactivarCliente_ConVentasActivas_ReturnsError(): void
        + testValidarEmail_FormatoInvalido_ReturnsError(): void
    }
    
    class ProductoServiceTest <<Unit Test>> {
        - productoService: ProductoService
        - mockProductoRepository: ProductoRepository
        - mockValidator: ProductoValidator
        ==
        + setUp(): void
        + testCrearProducto_DatosValidos_Success(): void
        + testActualizarStock_CantidadValida_Success(): void
        + testVerificarDisponibilidad_StockSuficiente_ReturnsTrue(): void
        + testVerificarDisponibilidad_StockInsuficiente_ReturnsFalse(): void
        + testObtenerProductosBajoStock_ConFiltros_ReturnsLista(): void
    }
    
    class VentaServiceTest <<Unit Test>> {
        - ventaService: VentaService
        - mockVentaRepository: VentaRepository
        - mockProductoService: ProductoService
        - mockClienteService: ClienteService
        ==
        + setUp(): void
        + testCrearVenta_DatosValidos_Success(): void
        + testAgregarProducto_DisponibilidadOK_Success(): void
        + testAgregarProducto_StockInsuficiente_ReturnsError(): void
        + testProcesarVenta_EstadoValido_Success(): void
        + testCancelarVenta_ConMotivo_Success(): void
        + testCalcularEstadisticas_ConFiltros_ReturnsDTO(): void
    }
    
    class TestDataManager <<Test Utility>> {
        + {static} crearClienteValido(): CrearClienteDTO
        + {static} crearProductoValido(): CrearProductoDTO
        + {static} crearVentaValida(): CrearVentaDTO
        + {static} crearMultiplesClientes(cantidad: int): List<CrearClienteDTO>
        + {static} crearMultiplesProductos(cantidad: int): List<CrearProductoDTO>
        + {static} limpiarDatosPrueba(): void
        + {static} configurarMocks(): void
        + {static} generarDatosPrueba(): void
    }
    
    class MockFactory <<Test Utility>> {
        + {static} crearMockClienteRepository(): ClienteRepository
        + {static} crearMockProductoRepository(): ProductoRepository
        + {static} crearMockVentaRepository(): VentaRepository
        + {static} configurarMockData(repos: List<Repository>): void
    }
}

' === RELATIONSHIPS ===

' Presentation to Service
Dreams ..> ClienteService : uses
MenuClientes ..> ClienteService : uses
MenuProductos ..> ProductoService : uses
MenuVentas ..> VentaService : uses
MenuVentas ..> ReporteService : uses

' Service Implementations
ClienteService <|.. ClienteServiceImpl : implements
ProductoService <|.. ProductoServiceImpl : implements
VentaService <|.. VentaServiceImpl : implements
ReporteService <|.. ReporteServiceImpl : implements

' Service to Repository
ClienteServiceImpl ..> ClienteRepository : uses
ProductoServiceImpl ..> ProductoRepository : uses
VentaServiceImpl ..> VentaRepository : uses
ReporteServiceImpl ..> VentaRepository : uses
ReporteServiceImpl ..> ProductoRepository : uses
ReporteServiceImpl ..> ClienteRepository : uses

' Repository Implementations
ClienteRepository <|.. InMemoryClienteRepository : implements
ProductoRepository <|.. InMemoryProductoRepository : implements
VentaRepository <|.. InMemoryVentaRepository : implements

' Service to Validators
ClienteServiceImpl ..> ClienteValidator : uses
ProductoServiceImpl ..> ProductoValidator : uses
VentaServiceImpl ..> VentaValidator : uses

' Validator Implementations
ClienteValidator <|.. ClienteValidatorImpl : implements
ProductoValidator <|.. ProductoValidatorImpl : implements
VentaValidator <|.. VentaValidatorImpl : implements

' Domain relationships
Cliente ||--o{ Venta : "üõí realiza"
Venta ||--o{ ProductoVenta : "üì¶ contiene"
ProductoVenta }o--|| Producto : "üè∑Ô∏è referencia"
Producto }o--|| CategoriaProducto : "üìÅ categor√≠a"
Venta }o--|| EstadoVenta : "üìä estado"

' Service inter-dependencies
VentaServiceImpl ..> ProductoService : uses
VentaServiceImpl ..> ClienteService : uses

' Configuration usage
Dreams ..> AppConfig : uses
Dreams ..> DatabaseConfig : uses

' Testing relationships
DreamsApplicationTests ..> ClienteService : tests
DreamsApplicationTests ..> ProductoService : tests
DreamsApplicationTests ..> VentaService : tests
DreamsApplicationTests ..> TestDataManager : uses

ClienteServiceTest ..> ClienteService : tests
ProductoServiceTest ..> ProductoService : tests
VentaServiceTest ..> VentaService : tests

ClienteServiceTest ..> MockFactory : uses
ProductoServiceTest ..> MockFactory : uses
VentaServiceTest ..> MockFactory : uses

' DTO usage (simplified - showing key relationships)
ClienteService ..> CrearClienteDTO : uses
ClienteService ..> ClienteDTO : returns
ProductoService ..> CrearProductoDTO : uses
ProductoService ..> ProductoDTO : returns
VentaService ..> CrearVentaDTO : uses
VentaService ..> VentaDTO : returns

' === NOTES ===
note top of Dreams : **üöÄ Main Application**\nBootstraps the system\nManages configuration\nHandles application lifecycle

note right of VentaServiceImpl : **üí∞ Core Business Logic**\nHandles complex sales operations\nManages stock updates\nApplies business rules\nCalculates taxes and discounts

note bottom of Result : **üõ°Ô∏è Railway Pattern**\nFunctional error handling\nComposable operations\nType-safe error management

note left of DreamsApplicationTests : **üîß Comprehensive Testing**\n‚Ä¢ Unit Tests with Mocks\n‚Ä¢ Integration Tests\n‚Ä¢ Performance Tests\n‚Ä¢ Edge Case Validation

' === LAYOUT OPTIMIZATION ===
Dreams -[hidden]down- ClienteService
ClienteDTO -[hidden]right- ProductoDTO
Cliente -[hidden]right- Producto
ClienteRepository -[hidden]right- ProductoRepository
ClienteValidator -[hidden]right- ProductoValidator

@enduml
