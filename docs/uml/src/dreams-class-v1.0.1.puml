@startuml Dreams System Model v1.0.1
    
    !theme spacelab
    
    ' Configuration
    skinparam classAttributeIconSize 0
    skinparam backgroundColor transparent
    skinparam linetype ortho
    
    package dreams.main #999999 {
        
        '=== Clases ===

        class Cliente {
            - **id**: UUID <<PK>>
            - nombre: String
            - email: String
            - activo: boolean
            --
            .. Constructors ..
            + Cliente(id: UUID, nombre: String, email: String)
            .. Setters ..
            + setNombre(nombre: String): void
            + setEmail(email: String): void
            + setActivo(activo: boolean): void
            .. Getters ..
            + getId(): UUID
            + getNombre(): String
            + getEmail(): String
            + getActivo(): boolean
            .. Controllers ..
            + actualizarInformacion(nombre: String, email: String): void
        }
        
        class Producto {
            - **id**: int <<PK>>
            - nombre: String
            - precio: BigDecimal
            - categoria: CategoriaProducto
            - stock: int
            - activo: boolean
            --
            .. Constructors ..
            + Producto(nombre: String, precio: double, categoria: String, stock: int)
            .. Setters ..
            + setNombre(nombre: String): void
            + setPrecio(precio: double): void
            + setCategoria(categoria: String): void
            + setStock(stock: int): void
            + setActivo(activo: boolean): void
            .. Getters ..
            + getId(): int
            + getNombre(): String
            + getPrecio(): double
            + getCategoria(): CategoriaProducto
            + getStock(): int
            + getActivo(): boolean
            .. Controllers ..
            + actualizarStock(cantidad: int): void
            + validarDisponibilidad(cantidadRequerida: Integer): boolean
        }
        
        class Venta {
            - **id**: int <<PK>>
            - **idCliente**: UUID <<FK>>
            - productosVenta: List<ProductoVenta>
            - subtotal: BigDecimal
            - impuestos: BigDecimal
            - total: BigDecimal
            - fechaCreacion: LocalDateTime
            - estado: EstadoVenta
            --
            .. Constructors ..
            + Venta(idCliente: UUID, fecha: LocalDateTime)
            .. Getters ..
            + getId(): int
            + getIdCliente(): UUID
            + getProductosVenta(): List<ProductoVenta>
            + getSubtotal(): BigDecimal
            + getImpuestos(): BigDecimal
            + getTotal(): BigDecimal
            + getFechaCreacion(): LocalDateTime
            + getEstado(): EstadoVenta
            .. Controllers ..
            + agregarProducto(producto: Producto, cantidad: int ): boolean
            + removerProducto(idProductoVenta: int): boolean
            + calcularTotal(): boolean
            + finalizarVenta(): boolean
        }
        
        class ProductoVenta {
            - **id**: int <<PK>>
            - **idProducto**: int <<FK>>
            - **idVenta**: int <<FK>>
            - cantidad: int
            - precioUnitario: double
            - subtotal: double
            --
            .. Constructors ..
            + ProductoVenta(idProducto: int, idVenta: int, cantidad: int, precioUnitario: double)
            .. Setters ..
            + setCantidad(cantidad: int): void
            .. Getters ..
            + getId(): int
            + getIdProducto(): int <<FK>>
            + getIdVenta(): int <<FK>>
            + getCantidad(): int
            + getPrecioUnitario(): double
            + getSubtotal(): double
            .. Controllers ..
            + calcularSubtotal(): double
        }

        class ProductoElectronica extends Producto {
            -- 
            .. Constructores ..
            + ProductoElectronica(nombre: String, precio: double, stock: int)
            .. Métodos específicos ..
            + garantiaExtendida(): boolean
        }

        class ProductoRopa extends Producto {
            -- 
            .. Constructores ..
            + ProductoRopa(nombre: String, precio: double, stock: int)
            .. Métodos específicos ..
            + esLavable(): boolean
        }
        
        '=== Enumeraciones ===
        
        enum EstadoVenta {
            PROCESANDO
            COMPLETADA
        }
        
    }
    
    '=== Pruebas ===

    package dreams.test #999999 {
    
        class Prueba {
            --
            .. Métodos Crear ..
            + {static} probarCrearCliente(): void
            + {static} probarCrearProducto(): void
            + {static} probarCrearVenta(): void
            + {static} probarCrearProductoVenta(): void
            .. Métodos Leer ..
            + {static} probarLeerCliente(): void
            + {static} probarLeerProducto(): void
            + {static} probarLeerVenta(): void
            + {static} probarLeerProductoVenta(): void
            .. Métodos Actualizar ..
            + {static} probarActualizarCliente(): void
            + {static} probarActualizarProducto(): void
            + {static} probarActualizarVenta(): void
            + {static} probarActualizarProductoVenta(): void
            .. Métodos Eliminar ..
            + {static} probarEliminarCliente(): void
            + {static} probarEliminarProducto(): void
            + {static} probarEliminarVenta(): void
            + {static} probarEliminarProductoVenta(): void
        }
        
    }

    ' === Relaciones ===

    ' --- Asociaciones simples ---

    ' Un Cliente puede realizar cero o muchas Ventas. Cada Venta es realizada por exactamente un Cliente.
    Cliente "1" -- "0..*" Venta : realiza

    ' Cada ProductoVenta se refiere a exactamente un Producto. Un Producto puede estar en múltiples ProductoVenta.
    ProductoVenta "1" -- "1" Producto : referencia

    ' --- Composiciones ---

    ' Una Venta se compone de uno o más ProductoVenta. La vida de ProductoVenta depende de la Venta (Composición).
    Venta "1" *-- "1..*" ProductoVenta : contiene

    ' --- Herencia ---

    'Producto <|-- ProductoElectronica
    'Producto <|-- ProductoRopa

    ' --- Enumeraciones ---

    ' Una Venta tiene exactamente un EstadoVenta. Un EstadoVenta puede ser asociado a cero o muchas Ventas.
    Venta "1" -left- "1" EstadoVenta : tiene estado
    
    ' --- Dependencias ---

    ' La clase Prueba depende de las otras clases para realizar sus operaciones, pero no tiene una asociación directa de datos con ellas.
    Venta <.. Prueba : usa
    Cliente <.. Prueba : usa
    Producto <.. Prueba : usa
    ProductoVenta <.. Prueba : usa

@enduml